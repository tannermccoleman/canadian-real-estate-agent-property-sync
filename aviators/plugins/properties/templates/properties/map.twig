<div class="map-wrapper">
<div class="map">
<script type="text/javascript">
jQuery(document).ready(function($) {
    google.maps.Map.prototype.setCenterWithOffset= function(latlng, offsetX, offsetY) {
        var map = this;
        var ov = new google.maps.OverlayView();
        ov.onAdd = function() {
            var proj = this.getProjection();
            var aPoint = proj.fromLatLngToContainerPixel(latlng);
            aPoint.x = aPoint.x+offsetX;
            aPoint.y = aPoint.y+offsetY;
            map.setCenter(proj.fromContainerPixelToLatLng(aPoint));
        }

        ov.draw = function() {};
        ov.setMap(this);
    };

    google.maps.visualRefresh = true;

    function LoadMap() {
        var locations = new Array({% for property in properties %}[{{ property.meta._property_latitude.0 }}, {{ property.meta._property_longitude.0 }}]{% if not loop.last %},{% endif %}{% endfor %});
        var types = new Array({% for property in properties %}'{{ wp.wp_get_object_terms(property.ID, 'property_types').0.slug }}'{% if not loop.last %},{% endif %}{% endfor %});
        var markers = new Array();
        var plainMarkers = new Array();
        var contents = new Array(
                {% for property in properties %}'{% include 'properties/map-infobox.twig' with {'property': property} %}'{% if not loop.last %},{% endif %}{% endfor %}
        );

        var mapOptions = {
            zoom: {{ zoom }},
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            scrollwheel: false,
            draggable: true,
            mapTypeControl: false,
            panControl: false,
            zoomControl: true,
            zoomControlOptions: {
                style: google.maps.ZoomControlStyle.SMALL,
                position: google.maps.ControlPosition.LEFT_BOTTOM
            }
        };


        if ('{{ enable_geolocation }}' == '1') {
            if(navigator.geolocation) {
                browserSupportFlag = true;
                navigator.geolocation.getCurrentPosition(function(position) {
                    initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
                    map.setCenter(initialLocation);
                }, function() {
                    mapOptions.center = new google.maps.LatLng({{ latitude }}, {{ longitude }});
                });
            } else {
                browserSupportFlag = false;
                mapOptions.center = new google.maps.LatLng({{ latitude }}, {{ longitude }});
            }
        } else {
            mapOptions.center = new google.maps.LatLng({{ latitude }}, {{ longitude }});
        }

        var map = new google.maps.Map(document.getElementById('map'), mapOptions);

        $.each(locations, function(index, location) {
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(location[0], location[1]),
                map: map,
                icon: '{{ wp.get_template_directory_uri() }}/assets/img/marker-transparent.png'
            });

            var myOptions = {
                content: contents[index],
                disableAutoPan: false,
                maxWidth: 0,
                pixelOffset: new google.maps.Size(-145, -200),
                zIndex: null,
                closeBoxURL: "",
                infoBoxClearance: new google.maps.Size(1, 1),
                position: new google.maps.LatLng(location[0], location[1]),
                isHidden: false,
                pane: "floatPane",
                enableEventPropagation: false
            };
            marker.infobox = new InfoBox(myOptions);
            marker.infobox.isOpen = false;

            var myOptions = {
                draggable: true,
                content: '<div class="marker ' + types[index] + '"><div class="marker-inner"></div></div>',
                disableAutoPan: true,
                pixelOffset: new google.maps.Size(-21, -58),
                position: new google.maps.LatLng(location[0], location[1]),
                closeBoxURL: "",
                isHidden: false,
                pane: "floatPane",
                enableEventPropagation: true
            };
            marker.marker = new InfoBox(myOptions);
            marker.marker.isHidden = false;
            marker.marker.open(map, marker);
            markers.push(marker);

            google.maps.event.addListener(marker, 'click', function (e) {
                var curMarker = this;

                $.each(markers, function (index, marker) {
                    // if marker is not the clicked marker, close the marker
                    if (marker !== curMarker) {
                        marker.infobox.close();
                        marker.infobox.isOpen = false;
                    }
                });


                if(curMarker.infobox.isOpen === false) {
                    curMarker.infobox.open(map, this);
                    curMarker.infobox.isOpen = true;
                    map.setCenterWithOffset(curMarker.getPosition(), 100, -120);
                } else {
                    curMarker.infobox.close();
                    curMarker.infobox.isOpen = false;
                }

            });
        });

        var markerCluster = new MarkerClusterer(map, markers, {
            styles: [
                {
                    height: 42,
                    url: '{{ wp.get_template_directory_uri() }}/assets/img/markers/cluster-transparent.png',
                    width: 42,
                    textColor: 'transparent'
                }
            ]
        });

        google.maps.event.addListener(map, 'zoom_changed', function() {
            $.each(markers, function(index, marker) {
                marker.infobox.close();
                marker.infobox.isOpen = false;
            });
        });


        function isClusterOnMap(clustersOnMap, cluster) {
            if (cluster === undefined) {
                return false;
            }

            if (clustersOnMap.length == 0) {
                return false;
            }

            var val = false;

            $.each(clustersOnMap, function(index, cluster_on_map) {
                if (cluster_on_map.getCenter() == cluster.getCenter()) {
                    val = cluster_on_map;
                }
            });

            return val;
        }

        var clustersOnMap = new Array();

        function addClusterOnMap(cluster) {
            // Hide all cluster's markers
            $.each(cluster.getMarkers(), (function() {
                if (this.marker.isHidden == false) {
                    this.marker.isHidden = true;
                    this.marker.close();
                }
            }));

            var newCluster = new InfoBox({
                markers: cluster.getMarkers(),
                draggable: true,
                content: '<div class="clusterer"><div class="clusterer-inner">' + cluster.getMarkers().length + '</div></div>',
                disableAutoPan: true,
                pixelOffset: new google.maps.Size(-21, -21),
                position: cluster.getCenter(),
                closeBoxURL: "",
                isHidden: false,
                enableEventPropagation: true,
                pane: "mapPane"
            });

            cluster.cluster = newCluster;

            cluster.markers = cluster.getMarkers();
            cluster.cluster.open(map, cluster.marker);
            clustersOnMap.push(cluster);
        }


        google.maps.event.addListener(markerCluster, 'clusteringend', function(clusterer) {
            var availableClusters = clusterer.getClusters();
            var activeClusters = new Array();

            $.each(availableClusters, function(index, cluster) {
                if (cluster.getMarkers().length > 1) {
                    activeClusters.push(cluster);
                }
            });

            $.each(availableClusters, function(index, cluster) {
                if (cluster.getMarkers().length > 1) {
                    var val = isClusterOnMap(clustersOnMap, cluster);

                    if (val !== false) {
                        val.cluster.setContent('<div class="clusterer"><div class="clusterer-inner">' + cluster.getMarkers().length + '</div></div>');
                        val.markers = cluster.getMarkers();
                        $.each(cluster.getMarkers(), (function(index, marker) {
                            if (marker.marker.isHidden == false) {
                                marker.marker.isHidden = true;
                                marker.marker.close();
                            }
                        }));
                    } else {
                        addClusterOnMap(cluster);
                    }
                } else {
                    // Show all markers without the cluster
                    $.each(cluster.getMarkers(), function(index, marker) {
                        if (marker.marker.isHidden == true) {
                            marker.marker.open(map, this);
                            marker.marker.isHidden = false;
                        }
                    });

                    // Remove old cluster
                    $.each(clustersOnMap, function (index, cluster_on_map) {
                        if (cluster !== undefined && cluster_on_map !== undefined) {
                            if (cluster_on_map.getCenter() == cluster.getCenter()) {
                                // Show all cluster's markers/
                                cluster_on_map.cluster.close();
                                clustersOnMap.splice(index, 1);
                            }
                        }
                    });
                }
            });

            var newClustersOnMap = new Array();

            $.each(clustersOnMap, function(index, clusterOnMap) {
                var remove = true;

                $.each(availableClusters, function(index2, availableCluster) {
                    if (availableCluster.getCenter() == clusterOnMap.getCenter()) {
                        remove = false;
                    }
                });

                if (!remove) {
                    newClustersOnMap.push(clusterOnMap);
                } else {
                    clusterOnMap.cluster.close();
                }
            });

            clustersOnMap = newClustersOnMap;
        });

        $('.infobox .close').live('click', function () {
            $.each(markers, function (index, marker) {
                marker.infobox.close();
                marker.infobox.isOpen = false;
            });
        });
    }

    google.maps.event.addDomListener(window, 'load', LoadMap);

    var dragFlag = false;
    var start = 0, end = 0;

    function thisTouchStart(e) {
        dragFlag = true;
        start = e.touches[0].pageY;
    }

    function thisTouchEnd() {
        dragFlag = false;
    }

    function thisTouchMove(e) {
        if ( !dragFlag ) return;
        end = e.touches[0].pageY;
        window.scrollBy( 0,( start - end ) );
    }

    document.getElementById("map").addEventListener("touchstart", thisTouchStart, true);
    document.getElementById("map").addEventListener("touchend", thisTouchEnd, true);
    document.getElementById("map").addEventListener("touchmove", thisTouchMove, true);
});
</script>

<div id="map" class="map-inner" style="height: {{ height }}"></div><!-- /.map-inner -->

{% if show_filter %}
    <div class="container">
        <div class="row">
            <div class="span3">
                {% include 'properties/filter.twig' %}
            </div><!-- /.span3 -->
        </div><!-- /.row -->
    </div><!-- /.container -->
{% endif %}
</div><!-- /.map -->
</div><!-- /.map-wrapper -->